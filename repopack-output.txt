================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-08-23T19:29:22.802Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Files
================================================================

================
File: PropertyMentor/asgi.py
================
"""
ASGI config for PropertyMentor project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'PropertyMentor.settings')

application = get_asgi_application()

================
File: PropertyMentor/settings.py
================
"""
Django settings for PropertyMentor project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7(#!u=5kz@t%&^aevqm9^ea8-e7xe0e%$jxf@x30!i$qwixb3$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'owners',
    'properties',
    'guests',
    'bookings'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PropertyMentor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PropertyMentor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Pacific/Auckland'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

================
File: PropertyMentor/urls.py
================
"""
URL configuration for PropertyMentor project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

================
File: PropertyMentor/wsgi.py
================
"""
WSGI config for PropertyMentor project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'PropertyMentor.settings')

application = get_wsgi_application()

================
File: README.md
================
# Short Term Rental Property Management System

This Django-based web application is designed to manage short-term rental properties, including owners, properties, guests, and bookings.

## Features

- Owner management
- Property listings
- Guest information
- Booking system

## Prerequisites

- Python 3.8+
- Django 3.2+

## Installation

1. Clone the repository:
   ```
   git clone https://github.com/hello-adam-martin/PropertyMentor
   cd PropertyMentor
   ```

2. Create a virtual environment and activate it:
   ```
   python -m venv venv
   source venv/bin/activate  # On Windows use `venv\Scripts\activate`
   ```

3. Install the required packages:
   ```
   pip install -r requirements.txt
   ```

4. Apply the migrations:
   ```
   python manage.py migrate
   ```

5. Create a superuser:
   ```
   python manage.py createsuperuser
   ```

6. Run the development server:
   ```
   python manage.py runserver
   ```

7. Open a web browser and navigate to `http://127.0.0.1:8000/admin/` to access the admin interface.

## Usage

[Provide brief instructions on how to use the main features of your application]

## Contributing

[Explain how others can contribute to your project]

## License

[Specify the license under which your project is released]

## Contact

[Adam Martin] - [hello.adam.martin@gmail.com]

Project Link: [https://github.com/hello-adam-martin/PropertyMentor](https://github.com/hello-adam-martin/PropertyMentor)

================
File: bookings/README.md
================
# Bookings App

This Django app manages bookings for the Short Term Rental Property Management system.

## Features

- Create, read, update, and delete bookings
- Automatic price calculation based on property pricing rules
- Booking validation to prevent conflicts and ensure logical date ranges
- Admin interface for managing bookings

## Models

### Booking

- `property`: ForeignKey to Property model
- `guest`: ForeignKey to Guest model
- `check_in_date`: Date of check-in
- `check_out_date`: Date of check-out
- `total_price`: Automatically calculated based on property pricing rules
- `status`: Booking status (pending, confirmed, cancelled, completed)
- `booking_date`: Date when the booking was created
- `special_requests`: Text field for any special requests

## Validation Rules

1. Check-out date must be after check-in date
2. Check-out date cannot be the same as check-in date
3. Bookings cannot overlap with existing bookings for the same property
4. A booking can start on the same day as another booking checks out

## Price Calculation

The total price is automatically calculated based on the property's pricing rules. These rules are defined in the Property model and can include:

- Base nightly rate
- Weekend pricing (applied to Fridays and Saturdays)
- Seasonal pricing
- Holiday pricing

The Booking model calculates the total price by applying these rules for each night of the stay, using the `get_price_for_date()` method from the Property model.

## Admin Interface

The admin interface provides a customized view for managing bookings:

- List display shows key booking information
- Filters for status and dates
- Search functionality
- Read-only total price field
- Custom titles for list, add, and edit views

## Usage

To create a new booking:

1. Go to the admin interface
2. Click on "Bookings" under the "Bookings" app
3. Click "Add Booking"
4. Fill in the required information
5. Save the booking

The system will automatically validate the booking and calculate the total price based on the property's pricing rules.

## Interaction with Property App

The Booking app relies on the Property app for:
- Property information
- Pricing rules
- Price calculation logic

Ensure that properties and their pricing rules are correctly set up in the Property app for accurate booking calculations.

## Future Enhancements

- Implement a public-facing booking interface
- Add email notifications for booking status changes
- Integrate with a payment system
- Implement a calendar view to visualize available dates and pricing

================
File: bookings/admin.py
================
from django.contrib import admin
from .models import Booking
from django.utils.html import format_html

@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ('property', 'guest', 'check_in_date', 'check_out_date', 'total_price', 'status')
    list_filter = ('status', 'check_in_date', 'check_out_date')
    search_fields = ('property__name', 'guest__first_name', 'guest__last_name', 'special_requests')
    readonly_fields = ('total_price', 'price_breakdown')

    def price_breakdown(self, obj):
        breakdown = obj.calculate_price_breakdown()
        html = "<table><tr><th>Date</th><th>Price</th><th>Rule Applied</th></tr>"
        for day in breakdown:
            html += f"<tr><td>{day['date']}</td><td>${day['price']}</td><td>{day['rule_applied']}</td></tr>"
        html += f"<tr><td colspan='3'><strong>Total: ${obj.total_price}</strong></td></tr>"
        html += "</table>"
        return format_html(html)
    price_breakdown.short_description = "Price Breakdown"

    def save_model(self, request, obj, form, change):
        obj.clean()  # This will run the validation and calculate the price
        super().save_model(request, obj, form, change)

================
File: bookings/apps.py
================
from django.apps import AppConfig


class BookingsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'bookings'

================
File: bookings/migrations/0001_initial.py
================
# Generated by Django 5.1 on 2024-08-22 18:19

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('guests', '0001_initial'),
        ('properties', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_date', models.DateField()),
                ('check_out_date', models.DateField()),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('booking_date', models.DateTimeField(auto_now_add=True)),
                ('special_requests', models.TextField(blank=True)),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='guests.guest')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='properties.property')),
            ],
            options={
                'ordering': ['-check_in_date'],
            },
        ),
    ]

================
File: bookings/migrations/0002_alter_booking_options.py
================
# Generated by Django 5.1 on 2024-08-22 18:52

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('bookings', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='booking',
            options={'ordering': ['check_in_date']},
        ),
    ]

================
File: bookings/migrations/0003_alter_booking_total_price.py
================
# Generated by Django 5.1 on 2024-08-22 18:55

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bookings', '0002_alter_booking_options'),
    ]

    operations = [
        migrations.AlterField(
            model_name='booking',
            name='total_price',
            field=models.DecimalField(decimal_places=2, editable=False, max_digits=10),
        ),
    ]

================
File: bookings/migrations/0004_alter_booking_options.py
================
# Generated by Django 5.1 on 2024-08-23 03:13

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('bookings', '0003_alter_booking_total_price'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='booking',
            options={'ordering': ['check_in_date'], 'verbose_name_plural': 'Bookings'},
        ),
    ]

================
File: bookings/migrations/0005_alter_booking_options.py
================
# Generated by Django 5.1 on 2024-08-23 05:23

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('bookings', '0004_alter_booking_options'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='booking',
            options={'ordering': ['-check_in_date']},
        ),
    ]

================
File: bookings/models.py
================
from django.db import models
from django.core.exceptions import ValidationError
from properties.models import Property
from guests.models import Guest
from datetime import timedelta
from django.utils import timezone

class Booking(models.Model):
    property = models.ForeignKey(Property, on_delete=models.CASCADE, related_name='bookings')
    guest = models.ForeignKey(Guest, on_delete=models.CASCADE, related_name='bookings')
    check_in_date = models.DateField()
    check_out_date = models.DateField()
    total_price = models.DecimalField(max_digits=10, decimal_places=2, editable=False)
    status = models.CharField(max_length=20, choices=[
        ('pending', 'Pending'),
        ('confirmed', 'Confirmed'),
        ('cancelled', 'Cancelled'),
        ('completed', 'Completed')
    ], default='pending')
    booking_date = models.DateTimeField(auto_now_add=True)
    special_requests = models.TextField(blank=True)

    def __str__(self):
        return f"{self.guest} at {self.property} ({self.check_in_date} to {self.check_out_date})"

    def calculate_price_breakdown(self):
        breakdown = []
        current_date = self.check_in_date
        while current_date < self.check_out_date:
            price, rule_applied = self.get_price_and_rule_for_date(current_date)
            breakdown.append({
                'date': current_date,
                'price': price,
                'rule_applied': rule_applied
            })
            current_date += timedelta(days=1)
        return breakdown

    def get_price_and_rule_for_date(self, date):
        base_price = self.property.nightly_rate
        applicable_rules = []

        for rule in self.property.pricing_rules.all():
            if rule.rule_type == 'override' and rule.start_date == date:
                return base_price * rule.get_modifier_factor(), f"Override: {rule.price_modifier}%"
            elif rule.rule_type == 'seasonal' and rule.start_date <= date <= rule.end_date:
                applicable_rules.append(rule)
            elif rule.rule_type == 'weekend' and date.weekday() in [4, 5]:  # Friday and Saturday
                applicable_rules.append(rule)

        if applicable_rules:
            # Sort by rule type (seasonal before weekend) and then by modifier (highest modifier first)
            applicable_rules.sort(key=lambda x: (x.rule_type != 'seasonal', -x.price_modifier))
            applied_rule = applicable_rules[0]
            return base_price * applied_rule.get_modifier_factor(), f"{applied_rule.get_rule_type_display()}: {applied_rule.price_modifier}%"

        return base_price, "Base rate"

    def calculate_total_price(self):
        return sum(day['price'] for day in self.calculate_price_breakdown())

    def clean(self):
        if self.check_in_date and self.check_out_date:
            if self.check_out_date <= self.check_in_date:
                raise ValidationError("Check-out date must be after check-in date.")

            if self.check_out_date == self.check_in_date:
                raise ValidationError("Check-out date cannot be the same as check-in date.")

            overlapping_bookings = Booking.objects.filter(
                property=self.property,
                check_in_date__lt=self.check_out_date,
                check_out_date__gt=self.check_in_date
            ).exclude(pk=self.pk)

            if overlapping_bookings.exists():
                raise ValidationError("This booking overlaps with an existing booking.")

        self.total_price = self.calculate_total_price()

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)

    class Meta:
        ordering = ['-check_in_date']

================
File: bookings/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: bookings/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: guests/admin.py
================
from django.contrib import admin
from .models import Guest

@admin.register(Guest)
class GuestAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email', 'phone', 'date_joined')
    list_filter = ('date_joined',)
    search_fields = ('first_name', 'last_name', 'email', 'phone')

================
File: guests/apps.py
================
from django.apps import AppConfig


class GuestsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'guests'

================
File: guests/migrations/0001_initial.py
================
# Generated by Django 5.1 on 2024-08-22 18:16

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=15)),
                ('date_joined', models.DateField(auto_now_add=True)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
    ]

================
File: guests/models.py
================
from django.db import models

class Guest(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=15)
    date_joined = models.DateField(auto_now_add=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

    class Meta:
        ordering = ['last_name', 'first_name']

================
File: guests/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: guests/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'PropertyMentor.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: owners/admin.py
================
from django.contrib import admin
from .models import Owner

@admin.register(Owner)
class OwnerAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email', 'phone', 'date_joined')
    search_fields = ('first_name', 'last_name', 'email')
    list_filter = ('date_joined',)

================
File: owners/apps.py
================
from django.apps import AppConfig


class OwnersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'owners'

================
File: owners/migrations/0001_initial.py
================
# Generated by Django 5.1 on 2024-08-22 13:17

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('date_joined', models.DateField(auto_now_add=True)),
            ],
        ),
    ]

================
File: owners/models.py
================
from django.db import models

class Owner(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=15)
    address = models.TextField()
    date_joined = models.DateField(auto_now_add=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

================
File: owners/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: owners/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: properties/README.md
================
# Property App

This Django app manages properties and their pricing rules for the Short Term Rental Property Management system.

## Features

- Create, read, update, and delete properties
- Manage complex pricing rules for each property
- Calculate property prices based on date and applicable rules

## Models

### Property

- `name`: CharField - Name of the property
- `address`: TextField - Address of the property
- `owner`: ForeignKey to Owner model
- `bedrooms`: PositiveIntegerField - Number of bedrooms
- `bathrooms`: DecimalField - Number of bathrooms
- `max_occupancy`: PositiveIntegerField - Maximum number of occupants
- `nightly_rate`: DecimalField - Base nightly rate
- `description`: TextField - Property description
- `date_added`: DateField - Date when the property was added to the system

#### Methods

- `get_price_for_date(date)`: Calculates the price for a specific date based on applicable pricing rules

### PricingRule

- `property`: ForeignKey to Property model
- `rule_type`: CharField - Type of pricing rule (weekend, seasonal, override)
- `start_date`: DateField - Start date for seasonal and override rules
- `end_date`: DateField - End date for seasonal rules (optional for override rules)
- `price_modifier`: DecimalField - Percentage modifier for the base price

#### Methods

- `get_modifier_factor()`: Returns the price modifier as a decimal factor

## Pricing Logic

The system supports three types of pricing rules:

1. Override Pricing: Applied to a specific date (e.g., holidays, special events)
2. Seasonal Pricing: Applied to a date range
3. Weekend Pricing: Applied to Fridays and Saturdays

Rules are applied in the following order of precedence:
1. Override (highest priority)
2. Seasonal
3. Weekend
4. Base nightly rate (lowest priority)

If multiple rules of the same type apply (e.g., overlapping seasonal periods), the rule with the highest price modifier is used.

## Usage

To create a new property:

1. Go to the admin interface
2. Click on "Properties" under the "Properties" app
3. Click "Add Property"
4. Fill in the required information
5. Save the property

To add pricing rules to a property:

1. Edit the property in the admin interface
2. Scroll to the "Pricing rules" section
3. Click "Add another Pricing rule"
4. Choose the rule type and fill in the details
5. Save the property

## Admin Customizations

The admin interface is customized to:
- Display key property information in the list view
- Allow inline editing of pricing rules when editing a property
- Show pricing rules with clear percentage representations

## Future Enhancements

- Implement a public-facing property listing interface
- Add support for property images
- Implement a calendar view to visualize pricing over time
- Add support for amenities and property features

================
File: properties/admin.py
================
from django.contrib import admin
from .models import Property, PricingRule

class PricingRuleInline(admin.TabularInline):
    model = PricingRule
    extra = 1
    fields = ('rule_type', 'start_date', 'end_date', 'price_modifier')

@admin.register(Property)
class PropertyAdmin(admin.ModelAdmin):
    list_display = ('name', 'address', 'owner', 'bedrooms', 'bathrooms', 'nightly_rate')
    list_filter = ('bedrooms', 'bathrooms')
    search_fields = ('name', 'address', 'owner__first_name', 'owner__last_name')
    inlines = [PricingRuleInline]

@admin.register(PricingRule)
class PricingRuleAdmin(admin.ModelAdmin):
    list_display = ('property', 'rule_type', 'start_date', 'end_date', 'price_modifier_display')
    list_filter = ('rule_type', 'property')
    search_fields = ('property__name',)

    def price_modifier_display(self, obj):
        return f"{obj.price_modifier}%"
    price_modifier_display.short_description = 'Price Modifier'

================
File: properties/apps.py
================
from django.apps import AppConfig


class PropertiesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'properties'

================
File: properties/migrations/0001_initial.py
================
# Generated by Django 5.1 on 2024-08-22 13:19

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('owners', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.DecimalField(decimal_places=1, max_digits=3)),
                ('max_occupancy', models.PositiveIntegerField()),
                ('nightly_rate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('description', models.TextField()),
                ('date_added', models.DateField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='owners.owner')),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
    ]

================
File: properties/migrations/0002_pricingrule.py
================
# Generated by Django 5.1 on 2024-08-23 03:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('properties', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_type', models.CharField(choices=[('weekend', 'Weekend Pricing'), ('seasonal', 'Seasonal Pricing'), ('holiday', 'Holiday Pricing')], max_length=10)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('price_modifier', models.DecimalField(decimal_places=2, help_text='e.g., 1.5 for 50% increase, 0.8 for 20% discount', max_digits=5)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='properties.property')),
            ],
        ),
    ]

================
File: properties/migrations/0003_alter_pricingrule_price_modifier.py
================
# Generated by Django 5.1 on 2024-08-23 03:19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('properties', '0002_pricingrule'),
    ]

    operations = [
        migrations.AlterField(
            model_name='pricingrule',
            name='price_modifier',
            field=models.DecimalField(decimal_places=2, help_text='Enter a percentage. E.g., 150 for 50% increase, 80 for 20% discount', max_digits=5),
        ),
    ]

================
File: properties/migrations/0004_alter_pricingrule_price_modifier.py
================
# Generated by Django 5.1 on 2024-08-23 03:24

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('properties', '0003_alter_pricingrule_price_modifier'),
    ]

    operations = [
        migrations.AlterField(
            model_name='pricingrule',
            name='price_modifier',
            field=models.DecimalField(decimal_places=2, help_text='Enter a percentage. E.g., 120 for 20% increase, 80 for 20% discount', max_digits=5),
        ),
    ]

================
File: properties/migrations/0005_alter_pricingrule_rule_type.py
================
# Generated by Django 5.1 on 2024-08-23 04:42

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('properties', '0004_alter_pricingrule_price_modifier'),
    ]

    operations = [
        migrations.AlterField(
            model_name='pricingrule',
            name='rule_type',
            field=models.CharField(choices=[('weekend', 'Weekend Pricing'), ('seasonal', 'Seasonal Pricing'), ('override', 'Override Pricing')], max_length=10),
        ),
    ]

================
File: properties/models.py
================
from django.db import models
from owners.models import Owner
from django.core.exceptions import ValidationError

class PricingRule(models.Model):
    RULE_TYPES = [
        ('weekend', 'Weekend Pricing'),
        ('seasonal', 'Seasonal Pricing'),
        ('override', 'Override Pricing'),  # Changed from 'holiday' to 'override'
    ]

    property = models.ForeignKey('Property', on_delete=models.CASCADE, related_name='pricing_rules')
    rule_type = models.CharField(max_length=10, choices=RULE_TYPES)
    start_date = models.DateField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    price_modifier = models.DecimalField(
        max_digits=5, 
        decimal_places=2, 
        help_text="Enter a percentage. E.g., 120 for 20% increase, 80 for 20% discount"
    )

    def clean(self):
        if self.rule_type == 'seasonal' and (not self.start_date or not self.end_date):
            raise ValidationError("Seasonal pricing must have start and end dates.")
        if self.rule_type == 'override' and not self.start_date:  # Changed condition
            raise ValidationError("Override pricing must have a start date.")
        if self.start_date and self.end_date and self.start_date > self.end_date:
            raise ValidationError("End date must be after start date.")
        if self.price_modifier <= 0:
            raise ValidationError("Price modifier must be greater than 0.")

    def __str__(self):
        return f"{self.get_rule_type_display()} for {self.property} ({self.price_modifier}%)"

    def get_modifier_factor(self):
        return self.price_modifier / 100

class Property(models.Model):
    WEEKEND_DAYS = [4, 5]  # Friday and Saturday

    name = models.CharField(max_length=100)
    address = models.TextField()
    owner = models.ForeignKey(Owner, on_delete=models.CASCADE, related_name='properties')
    bedrooms = models.PositiveIntegerField()
    bathrooms = models.DecimalField(max_digits=3, decimal_places=1)
    max_occupancy = models.PositiveIntegerField()
    nightly_rate = models.DecimalField(max_digits=8, decimal_places=2)
    description = models.TextField()
    date_added = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.name
    
    def get_price_for_date(self, date):
        base_price = self.nightly_rate
        applicable_rules = []

        for rule in self.pricing_rules.all():
            if rule.rule_type == 'override' and rule.start_date == date:
                return base_price * rule.get_modifier_factor()  # Highest priority, return immediately
            elif rule.rule_type == 'seasonal' and rule.start_date <= date <= rule.end_date:
                applicable_rules.append(rule)
            elif rule.rule_type == 'weekend' and date.weekday() in [4, 5]:  # Friday and Saturday
                applicable_rules.append(rule)

        if applicable_rules:
            # Sort by rule type (seasonal before weekend) and then by modifier (highest modifier first)
            applicable_rules.sort(key=lambda x: (x.rule_type != 'seasonal', -x.price_modifier))
            return base_price * applicable_rules[0].get_modifier_factor()

        return base_price

    class Meta:
        verbose_name_plural = "Properties"

================
File: properties/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: properties/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: requirements.txt
================
asgiref==3.8.1
Django==5.1
sqlparse==0.5.1
